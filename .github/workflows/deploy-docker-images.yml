name: Build and Push Docker Images

on:
  pull_request:
    branches:
      - main

  workflow_dispatch:

jobs:
  build-and-push-backend:
    if: ${{ startsWith(github.event.pull_request.head.ref, 'release/') }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: true
          token: ${{ secrets.ACTION_KEY }}  # 서브모듈 체크아웃 시 인증을 위해 토큰 사용

      - name: Set VERSION from PR title
        run: |
          VERSION=$(echo "${{ github.event.pull_request.title }}" | sed -n 's/release: version \(.*\)/\1/p')
          echo "VERSION=${VERSION}" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.ACTION_KEY }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build and push backend Docker image
        run: |
          docker buildx build --platform linux/amd64 -t ghcr.io/${{ github.repository }}/backend:${{ env.VERSION }} -t ghcr.io/${{ github.repository }}/backend:latest -f ./server/Dockerfile --push ./server

  build-and-push-frontend:
    if: ${{ startsWith(github.event.pull_request.head.ref, 'release/') }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: true
          token: ${{ secrets.ACTION_KEY }}  # 서브모듈 체크아웃 시 인증을 위해 토큰 사용

      - name: Set up environment files
        run: |
          echo "REACT_APP_API_URL=${{ secrets.API_URL }}" >> ./client/.env
          echo "REACT_APP_FIREBASE_API_KEY=${{ secrets.FIREBASE_API_KEY }}" >> ./client/.env
          echo "REACT_APP_FIREBASE_APP_ID=${{ secrets.FIREBASE_APP_ID }}" >> ./client/.env
          echo "REACT_APP_FIREBASE_AUTH_DOMAIN=${{ secrets.FIREBASE_AUTH_DOMAIN }}" >> ./client/.env
          echo "REACT_APP_FIREBASE_MEASUREMENT_ID=${{ secrets.FIREBASE_MEASUREMENT_ID }}" >> ./client/.env
          echo "REACT_APP_FIREBASE_MESSAGING_SENDER_ID=${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}" >> ./client/.env
          echo "REACT_APP_FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }}" >> ./client/.env
          echo "REACT_APP_FIREBASE_STORAGE_BUCKET=${{ secrets.FIREBASE_STORAGE_BUCKET }}" >> ./client/.env

      - name: Set VERSION from PR title
        run: |
          VERSION=$(echo "${{ github.event.pull_request.title }}" | sed -n 's/release: version \(.*\)/\1/p')
          echo "VERSION=${VERSION}" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.ACTION_KEY }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build and push frontend Docker image
        run: |
          docker buildx build --platform linux/amd64 -t ghcr.io/${{ github.repository }}/frontend:${{ env.VERSION }} -t ghcr.io/${{ github.repository }}/frontend:latest -f ./client/Dockerfile --push ./client

  deploy-to-ec2:
    if: ${{ startsWith(github.event.pull_request.head.ref, 'release/') }}
    runs-on: ubuntu-latest
    needs: [ build-and-push-backend, build-and-push-frontend ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set VERSION environment variable
        run: |
          VERSION=$(echo "${{ github.event.pull_request.title }}" | sed -n 's/release: version \(.*\)/\1/p')
          echo "VERSION=${VERSION}" >> $GITHUB_ENV

      - name: SSH into EC2 and deploy
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          port: ${{ secrets.EC2_PORT }}
          script: |
            echo "${{ secrets.ACTION_KEY }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            sudo sed -i "s/[0-9]*\.[0-9]*\.[0-9]*/${{ env.VERSION }}/g" /opt/openvidu/docker-compose.override.yml
            sudo su -c "cd /opt/openvidu && docker compose pull react_app spring_app && docker compose down && docker compose up -d"
